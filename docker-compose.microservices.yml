version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./backend/microservices/gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - consul
      - redis
      - auth-service
      - thinking-service
      - collaboration-service
      - ai-service
      - blockchain-service
      - graphql-service
    environment:
      - CONSUL_HOST=consul
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: ./backend/microservices/auth
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRE_MINUTES=30
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Thinking Analysis Service
  thinking-service:
    build:
      context: ./backend/microservices/thinking
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - redis
      - ai-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thinking_db
      - REDIS_URL=redis://redis:6379/1
      - AI_SERVICE_URL=http://ai-service:8086
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Collaboration Service
  collaboration-service:
    build:
      context: ./backend/microservices/collaboration
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/collaboration_db
      - REDIS_URL=redis://redis:6379/2
      - WEBSOCKET_HOST=0.0.0.0
      - WEBSOCKET_PORT=8083
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockchain Service
  blockchain-service:
    build:
      context: ./backend/microservices/blockchain
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - redis
      - ipfs
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/blockchain_db
      - REDIS_URL=redis://redis:6379/3
      - WEB3_PROVIDER_URL=https://mainnet.infura.io/v3/YOUR_PROJECT_ID
      - IPFS_API_URL=http://ipfs:5001
      - PRIVATE_KEY=your-private-key
    volumes:
      - ./logs:/app/logs
      - ./blockchain_data:/app/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GraphQL Service
  graphql-service:
    build:
      context: ./backend/microservices/graphql
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/graphql_db
      - REDIS_URL=redis://redis:6379/4
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced AI Service
  ai-service:
    build:
      context: ./backend/microservices/ai_advanced
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - redis
      - vector-db
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ai_db
      - REDIS_URL=redis://redis:6379/5
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - VECTOR_DB_URL=http://vector-db:8000
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./ai_cache:/app/cache
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Quantum Computing Service
  quantum-service:
    build:
      context: ./backend/microservices/quantum
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/6
      - QUANTUM_BACKEND=qiskit_aer
      - IBM_QUANTUM_TOKEN=${IBM_QUANTUM_TOKEN}
    volumes:
      - ./logs:/app/logs
      - ./quantum_cache:/app/cache
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge Computing Service
  edge-service:
    build:
      context: ./backend/microservices/edge
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/7
      - EDGE_DEVICE_ID=edge-01
      - CENTRAL_SERVER_URL=http://api-gateway:8080
    volumes:
      - ./logs:/app/logs
      - ./edge_cache:/app/cache
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Streaming Service
  streaming-service:
    build:
      context: ./backend/microservices/streaming
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379/8
      - STREAM_PROCESSING_INTERVAL=1000
    volumes:
      - ./logs:/app/logs
      - ./streaming_data:/app/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice AI Service
  voice-service:
    build:
      context: ./backend/microservices/voice
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/9
      - VOICE_MODEL_PATH=/app/models/voice
      - WHISPER_MODEL_SIZE=base
    volumes:
      - ./logs:/app/logs
      - ./voice_models:/app/models
      - ./audio_cache:/app/cache
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=intelligent_thinking
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d intelligent_thinking"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474/db/data/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search
  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for Message Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - microservices-network

  # Consul for Service Discovery
  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Vector Database (ChromaDB)
  vector-db:
    image: ghcr.io/chroma-core/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - vector_db_data:/chroma/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS for Distributed Storage
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  elasticsearch_data:
  kafka_data:
  zookeeper_data:
  consul_data:
  vector_db_data:
  ipfs_data:
  prometheus_data:
  grafana_data:
  jaeger_data: 